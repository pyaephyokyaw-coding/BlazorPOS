@page "/products"
@using BlazorPOS.Domain.Entities
@using BlazorPOS.Application.Interfaces
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IProductRepository ProductRepository
@inject IJSRuntime JSRuntime

<PageTitle>Products</PageTitle>

<h3>Products</h3>

<div class="mb-3">
    <button type="submit" class="btn btn-primary" @onclick="ShowAddProductDialog">Add Product</button>
</div>

@if (_products == null)
{
    <p>Loading...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in _products)
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>@product.Category</td>
                        <td>@product.Price.ToString("C")</td>
                        <td>@product.StockQuantity</td>
                        <td>
                            <button class="btn btn-sm btn-info me-2" @onclick="() => ShowEditProductDialog(product)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (_showDialog)
{
    <div class="modal" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(_editingProduct.Id > 0 ? "Edit" : "Add") Product</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_editingProduct" OnValidSubmit="SaveProduct">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText class="form-control" @bind-Value="_editingProduct.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" @bind="_editingProduct.Category">
                                @foreach (var category in _categories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Price</label>
                            <InputNumber class="form-control" @bind-Value="_editingProduct.Price" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Stock Quantity</label>
                            <InputNumber class="form-control" @bind-Value="_editingProduct.StockQuantity" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Barcode</label>
                            <InputText class="form-control" @bind-Value="_editingProduct.Barcode" />
                            <button type="button" class="btn btn-sm btn-primary mt-2" @onclick="GenerateBarcode">Generate Barcode</button>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="_editingProduct.Description" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Product>? _products;
    private bool _showDialog;
    private Product _editingProduct = new();
    private List<string> _categories = new() { "Electronics", "Clothing", "Groceries", "Books", "Toys" };

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        var products = await ProductRepository.GetAllAsync();
        _products = products.ToList();
        StateHasChanged();
    }

    private void ShowAddProductDialog()
    {
        _editingProduct = new Product
            {
                CreatedAt = DateTime.Now,
                IsActive = true
            };
        _showDialog = true;
        StateHasChanged();
    }

    private void ShowEditProductDialog(Product product)
    {
        _editingProduct = new Product
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                StockQuantity = product.StockQuantity,
                Barcode = product.Barcode,
                Category = product.Category,
                IsActive = product.IsActive,
                CreatedAt = product.CreatedAt,
                UpdatedAt = DateTime.Now
            };
        _showDialog = true;
        StateHasChanged();
    }

    private async Task SaveProduct()
    {
        try
        {
            var existingProduct = await ProductRepository.GetByIdAsync(_editingProduct.Id);
            if (existingProduct != null)
            {
                // Detach the existing tracked entity
                ProductRepository.Detach(existingProduct);
            }

            if (_editingProduct.Id > 0)
            {
                await ProductRepository.UpdateAsync(_editingProduct);
            }
            else
            {
                await ProductRepository.AddAsync(_editingProduct);
            }

            await LoadProducts();
            CloseDialog();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving product: {ex.Message}");
        }
    }

    private async Task DeleteProduct(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?"))
        {
            try
            {
                await ProductRepository.DeleteAsync(id);
                await LoadProducts();
            }
            catch (DbUpdateConcurrencyException)
            {
                await JSRuntime.InvokeVoidAsync("alert", "The product was not deleted because it was modified or deleted by another user.");
                await LoadProducts();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting product: {ex.Message}");
            }
        }
    }

    private void CloseDialog()
    {
        _showDialog = false;
        _editingProduct = new();
        StateHasChanged();
    }

    private void GenerateBarcode()
    {
        _editingProduct.Barcode = Guid.NewGuid().ToString();
        StateHasChanged();
    }
}
