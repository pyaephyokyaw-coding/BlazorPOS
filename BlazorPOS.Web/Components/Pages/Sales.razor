@page "/sales"
@rendermode InteractiveServer
@using BlazorPOS.Domain.Entities
@using BlazorPOS.Application.Interfaces
@inject IProductRepository ProductRepository
@inject ISaleRepository SaleRepository
@inject IJSRuntime JSRuntime

<PageTitle>Sales</PageTitle>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h3>New Sale</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Scan barcode or search product" 
                               @bind="_searchQuery" @onkeyup="SearchProducts" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="SearchProducts">Search</button>
                    </div>
                </div>

                @if (_searchResults?.Any() == true)
                {
                    <div class="list-group mb-3">
                        @foreach (var product in _searchResults)
                        {
                            <button class="list-group-item list-group-item-action" @onclick="() => AddToCart(product)">
                                @product.Name - @product.Price.ToString("C")
                            </button>
                        }
                    </div>
                }

                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in _currentSale.Items)
                            {
                                <tr>
                                    <td>@item.ProductName</td>
                                    <td>@item.UnitPrice.ToString("C")</td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm" style="width: 80px"
                                               @bind="item.Quantity" @bind:after="CalculateTotal" />
                                    </td>
                                    <td>@item.TotalPrice.ToString("C")</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveFromCart(item)">
                                            Remove
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h3>Payment</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Customer Name</label>
                    <input class="form-control" @bind="_currentSale.CustomerName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Customer Phone</label>
                    <input class="form-control" @bind="_currentSale.CustomerPhone" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Payment Method</label>
                    <select class="form-select" @bind="_currentSale.PaymentMethod">
                        <option value="Cash">Cash</option>
                        <option value="Card">Card</option>
                        <option value="Mobile">Mobile Payment</option>
                    </select>
                </div>

                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>Subtotal:</span>
                        <span>@_currentSale.TotalAmount.ToString("C")</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Tax (5%):</span>
                        <span>@_currentSale.Tax.ToString("C")</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Discount:</span>
                        <div>
                            <input type="number" class="form-control form-control-sm" style="width: 100px"
                                   @bind="_currentSale.Discount" @bind:after="CalculateTotal" />
                        </div>
                    </div>
                    <hr />
                    <div class="d-flex justify-content-between">
                        <span class="h5">Final Amount:</span>
                        <span class="h5">@_currentSale.FinalAmount.ToString("C")</span>
                    </div>
                </div>

                <button class="btn btn-primary w-100" @onclick="CompleteSale" 
                        disabled="@(!_currentSale.Items.Any())">
                    Complete Sale
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private string _searchQuery = "";
    private List<Product>? _searchResults;
    private Sale _currentSale = CreateNewSale();

    private static Sale CreateNewSale()
    {
        return new Sale
        {
            SaleDate = DateTime.Now,
            PaymentMethod = "Cash",
            Items = new List<SaleItem>()
        };
    }

    private async Task SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            _searchResults = null;
            return;
        }

        var allProducts = await ProductRepository.GetAllAsync();
        _searchResults = allProducts
            .Where(p => p.Name.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ||
                       p.Barcode == _searchQuery)
            .ToList();
    }

    private void AddToCart(Product product)
    {
        var existingItem = _currentSale.Items
            .FirstOrDefault(i => i.ProductId == product.Id);

        if (existingItem != null)
        {
            existingItem.Quantity++;
            existingItem.TotalPrice = existingItem.UnitPrice * existingItem.Quantity;
        }
        else
        {
            _currentSale.Items.Add(new SaleItem
            {
                ProductId = product.Id,
                ProductName = product.Name,
                UnitPrice = product.Price,
                Quantity = 1,
                TotalPrice = product.Price
            });
        }

        _searchResults = null;
        _searchQuery = "";
        CalculateTotal();
    }

    private void RemoveFromCart(SaleItem item)
    {
        _currentSale.Items.Remove(item);
        CalculateTotal();
    }

    private void CalculateTotal()
    {
        _currentSale.TotalAmount = _currentSale.Items.Sum(i => i.TotalPrice);
        _currentSale.Tax = _currentSale.TotalAmount * 0.05m; // 5% tax
        _currentSale.FinalAmount = _currentSale.TotalAmount + _currentSale.Tax - _currentSale.Discount;
    }

    private async Task CompleteSale()
    {
        if (!_currentSale.Items.Any())
            return;

        await SaleRepository.AddAsync(_currentSale);
        _currentSale = CreateNewSale();
        await JSRuntime.InvokeVoidAsync("alert", "Sale completed successfully!");
    }
}
